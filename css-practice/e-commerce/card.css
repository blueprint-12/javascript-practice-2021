* {
  box-sizing: border-box;
}
html,
body {
  margin: 0;
  padding: 0;
}
.itemWrap {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: flex-start;
  flex-wrap: wrap;
}

.item {
  width: calc(25% - 7px);
  aspect-ratio: 6 / 5;
  position: relative;
  overflow: hidden;
  border-radius: 10px;
  margin-bottom: 10px;
}
.imgBox {
  width: 100%;
  height: 100%;
}
.imgBox img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.textBox {
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  align-items: flex-start;
  padding: 20px;
  z-index: 3;
}
.textBox p {
  color: white;
  margin: 5px 0 0;
}
.textBox__name {
  font-size: 22px;
  font-weight: 500;
  opacity: 0;
  transform: translateY(50px);
}
.textBox__price {
  font-size: 16px;
  font-weight: 400;
  opacity: 0;
  transform: translateY(50px);
}

.item::after {
  content: '';
  display: block;
  background: rgba(0, 0, 0, 0.2);
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  opacity: 0;
  z-index: 2;
}
.item:hover::after {
  opacity: 1;
}
.item:hover .imgBox img {
  transform: scale(1.1);
  /* 이미지가 커졌을 때 내용물이 삐져나가면 안되니까 item에 overflow: hidden 처리 */
  /* 필터 속성은 이미지에 추가효과를 줄 수 있다. */
  filter: blur(3px);
}
.item:hover .textBox__name {
  opacity: 1;
  /* hover가 됐을 때 원래 자리로 오게하면 기존에 아래에 있던 텍스트를 위로 올라오는 애니메이션으로 만들어줄 수 있다. */
  transform: translateY(0);
}
.item:hover .textBox__price {
  opacity: 1;
  transform: translateY(0);
}

/* transition이 적용된 요소에 각각 찾아가서 써주는 것보단 변화를 갖는 요소를
한번에 작성해서 적용해주는게 편할 수 있다.  */
.item:after,
.item .imgBox img,
.item .textBox__name,
.item .textBox__price {
  transition: all 0.3s ease-in-out;
}

/* 다른 속성은 그대로 가되 0.1초의 delay를 주기 위해서 덮어쓰는 코드 작성 */
.item .textBox__price {
  transition: all 0.3s ease-in-out 0.2s;
}
